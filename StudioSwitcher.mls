//////////////////////////////////
// Studio Switcher Script V2.0 ///
// Written by Thomas Mongstad  ///
//////////////////////////////////

const  
    DEBUG =                 False;  // Set to false in production
    LOGGING =               True;   // Reccomending true in production
    VIEW_ALL_COMMANDS =     False;  // Set to false in production. Logs all executed commands to SystemLog

    // NTFY Logging and Debugging
    NTFY_LOG =              True; // True if set up, false if not.
    LOG_SEARCH_PHRASE =     'Studio Switcher Log:';
    NTFY_LOG_ENDPOINT =     '10.0.8.149/Test-mAirlist-Logs';
    DEBUG_SEARCH_PHRASE =   'Studio Switcher Debug:';
    NTFY_DEBUG_ENDPOINT =   '10.0.8.149/Test-mAirlist-Debug';

    // Your serverstudio/virtual studio
    SERVER_STUDIO_IP =      '127.0.0.1:9300'; // Change to your IP and port
    SERVER_STUDIO_USER =    'thomas';
    SERVER_STUDIO_PASSWORD ='thomas';

    // Your main studio
    STUDIO1_IP =            '127.0.0.1:9300'; // Change to your IP and port
    STUDIO1_USER =          'thomas';
    STUDIO1_PASSWORD =      'thomas';

var
    i:                      integer;
    GO_ON_AIR:              boolean;
    GO_OFF_AIR:             boolean;
    STUDIO_ON_AIR_STATUS:   boolean;

    sl:                     TStringList;
    STUDIO:                 string;

// Custom procedures
procedure WriteLog(message: String);
begin
    if (LOGGING) then
    begin
        SystemLog(STUDIO + ' Studio Switcher Log: ' + message);
    end;
    if (NTFY_LOG) then
    begin
        if (NTFY_LOG_ENDPOINT = '') then begin
            exit;
        end; 
        ShellExecuteHidden('curl', '-d "' + STUDIO + ' ' + message + '" ' + NTFY_LOG_ENDPOINT);
    end;
end;

procedure WriteScriptDebug(message: String);
begin
    if (DEBUG) then
    begin
        SystemLog(STUDIO + ' Studio Switcher Debug: ' + message);
    end;
    if (NTFY_LOG) then
    begin
        if (NTFY_DEBUG_ENDPOINT = '') then begin
            exit;
        end; 
        ShellExecuteHidden('curl', '-d "' + STUDIO + ' ' + message + '" ' + NTFY_DEBUG_ENDPOINT);
    end;
end;

procedure ViewAllCommands(message: String);
begin
    if (VIEW_ALL_COMMANDS) then
    begin
        SystemLog(STUDIO + ' Command Viewer: ' + message);
    end;
end;

procedure StopStudio;
begin
    ExecuteCommand('ENCODER DISCONNECT');
    ExecuteCommand('AUTOMATION 1 OFF');
    Sleep(2000); 
    ExecuteCommand('PLAYLIST 1 CLEAR');
    GO_ON_AIR := False;
end;

procedure GoOnAir;
begin
    if(GO_ON_AIR) then begin
        Sleep(5000);
        WriteLog('GO ON AIR');
        WriteScriptDebug('GOING ON AIR');
        ExecuteCommand('AUTOMATION 1 ON');
        ExecuteCommand('ON AIR');
        ExecuteCommand('AUTOMATION 1 PLAY');
        GO_ON_AIR := False;
    end;
end;

procedure GoOffAir;
begin
    if(GO_OFF_AIR) then begin
        WriteLog('GO OFF AIR');
        WriteScriptDebug('GOING OFF AIR');
        ExecuteCommand('AUTOMATION 1 STOP');
        Sleep(2500);
        StopStudio();
        GO_OFF_AIR := False;
    end;
end;

procedure RestToServer(Command: String);
begin
    if (STUDIO = 'SERVER') then begin
        WriteScriptDebug('Server studio trying to send REST command to itself. Aborting..');
        exit;
    end;

    HTTPPost('http://' + SERVER_STUDIO_USER + ':' + SERVER_STUDIO_PASSWORD + '@' + SERVER_STUDIO_IP + '/execute', 'command='+Command);
end;

procedure RestToStudio1(Command: String);
begin
    if (STUDIO = 'STUDIO1') then begin
        WriteScriptDebug('Studio 1 trying to send REST command to itself. Aborting..');
        exit;
    end;

    HTTPPost('http://' + STUDIO1_USER + ':' + STUDIO1_PASSWORD + '@' + STUDIO1_IP + '/execute', 'command='+Command);
end;

// mAirlist procedures
procedure OnLoad;
begin
    SystemLog('Loaded Studio Switcher Script');
    GO_ON_AIR := False; // TO Consider, maybe add this as a file, in case of script loading after variable is set to True?

    sl := TStringList.Create;
    try
        // From C:/Program Files (x86)/Mairlist directory
        sl.LoadFromFile('node.txt');
        STUDIO := sl[0];
        WriteScriptDebug('Current node is '+STUDIO);
    except
        WriteScriptDebug('Could not read node.txt file');
        
    finally
        sl.Free;
    end;
end;

procedure OnOnAir;
begin
    STUDIO_ON_AIR_STATUS := True;
    WriteScriptDebug('Set STUDIO_ON_AIR_STATUS to true');
end;

procedure OnOffAir;
begin
    STUDIO_ON_AIR_STATUS := False;
    WriteScriptDebug('Set STUDIO_ON_AIR_STATUS to false');
end;

procedure OnExecuteCommand(Command: string);
begin
    ViewAllCommands(Command); 
    
    if Command = 'TOTH_CHECK' then begin
        WriteScriptDebug('Running TOTH checks..');
        GoOnAir();
        GoOffAir();
        WriteScriptDebug(Command);
    end;

    if Command = 'GO_ON_AIR TRUE' then begin
        GO_ON_AIR := True;
        GO_OFF_AIR := False;
        WriteLog('This Studio will go live next hour.');
        WriteScriptDebug(Command);
    end;

    if Command = 'GO_ON_AIR FALSE' then begin
        GO_ON_AIR := False;
        WriteScriptDebug(Command);
    end;

    if Command = 'GO_OFF_AIR TRUE' then begin
        GO_OFF_AIR := True;
        GO_ON_AIR := False;
        WriteLog('This Studio will go off air next hour.');
        WriteScriptDebug(Command);
    end;

    if Command = 'GO_OFF_AIR FALSE' then begin
        GO_OFF_AIR := False;
        WriteScriptDebug(Command);
    end;

    if Command = 'DELAYED CLEAR' then begin
        StopStudio();
        WriteScriptDebug(Command);
    end;

    if Command = 'MESSAGE_TO_SERVER' then begin
        Sleep(2000);
        ShowMessage('Server studio will go on air next hour.');
        WriteScriptDebug(Command);
    end;

    if Command = 'MESSAGE_TO_CURRENT' then begin
        Sleep(2000);
        ShowMessage('This studio will go on air next hour.');
        WriteScriptDebug(Command);
    end;

    if Command = 'CONFIRMATION_FROM_SERVER' then begin
        SystemLog('Confirmation from server. Going on air next hour');
        ShowMessage('Melding fra server: Bekrefter on air fra neste time.');
        WriteScriptDebug(Command);
    end;

    if Command = 'TEST_REST' then begin
        RestToStudio1('TESTET REST, STUDIO 1');
        RestToServer('TESTET REST, SERVER');
    end;

    if Command = 'ACTIVATE_TOTH_BUTTON' then begin
        if (STUDIO_ON_AIR_STATUS) then begin
            WriteScriptDebug('Current studio is already on air. Aborting..');
            ShowMessage('Current studio is already on air, aborting action.');
            
            ExecuteCommand('GO_OFF_AIR FALSE');
            exit;
        end;
        ExecuteCommand('GO_ON_AIR TRUE');
        ExecuteCommand('MESSAGE_TO_CURRENT');
        // TODO! Load Database Playlist(next hour)
        // For now, created a hidden button..
        ExecuteCommand('LOAD_PLAYLIST PRESS');
        RestToServer('GO_OFF_AIR TRUE');
        WriteScriptDebug(Command);
    end;
        
    if Command = 'DEACTIVATE_TOTH_BUTTON' then begin
        ExecuteCommand('GO_ON_AIR FALSE');
        ExecuteCommand('GO_OFF_AIR TRUE');
        ExecuteCommand('MESSAGE_TO_SERVER');
        RestToServer('SERVER_TOTH_PRESS');
        WriteScriptDebug(Command);
    end;

    if Command = 'SERVER_TOTH_PRESS' then begin
        if not (STUDIO = 'SERVER') then begin
            WriteScriptDebug('This node is not the server, aborting..');
            exit;
        end;
        // TODO! Load Database Playlist(next hour)
        // For now, created a hidden button..
        ExecuteCommand('LOAD_PLAYLIST PRESS');
        ExecuteCommand('GO_ON_AIR TRUE');
        RestToStudio1('CONFIRMATION_FROM_SERVER');
    end;

end;

begin    
end.